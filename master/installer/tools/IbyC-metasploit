#!/data/data/com.termux/files/usr/bin/bash
#Created on Feb/2020
IFS=$'\n\t'
trap ctrl_c 2

SCRIPT_NAME="IbyC-$TOOL"
TOOL="metasploit"
UNAME=$(uname -m)
PGv=$(find $PREFIX/lib/ruby/gems/$GEMS/gems -iname pg_ext.so | awk -F "/" '{print $12}' | head -n 1)
SOv=$(termux-info |awk '$1 < 11 {print $1}' |tail -n 1 |awk -F "." '{print $1}')
JAVADB="https://raw.githubusercontent.com/ivam3/java/master"
R7DB="https://github.com/rapid7/metasploit-framework/archive"
iHDB="https://github.com/ivam3/i-Haklab/raw/master/.set"
SHLL=$(echo $SHELL |awk -F "/" '{print $8}')
MSFDIR=$PREFIX/opt/metasploit-framework
APK=$MSFDIR/lib/msf/core/payload/apk.rb
MSFv="5.0.94"
R='\033[1;31m'
G='\033[1;32m'
Goke='\033[92m'
Glig=='\e[1;32m'
Y='\033[1;33m'
B='\033[1;34m'
M='\033[1;35m'
C='\033[1;36m'
W='\033[0m'

ctrl_c() {
	printf "$R\n[w] Need a help? [w]$B\n\t Telegram : t.me/Ivam3_Bot$W\n"
	exit
}

#::::::::BLOCKING:::::::#
while [ ! $(id -u) -ne 0 ]; do
	printf "$R\n[W]:-> You need to be a common user$W\n"
	exit
done
until [ -e $HOME/$SCRIPT_NAME ]; do
	printf "$R\n[W]:-> $SCRIPT_NAME file have to be in Home directory$W\n"
	exit
done

#:::::::::DEFINITIONS:::::::#
if [ "$SOv" -lt "7" ]
then
        GEMS=2.6.0
else
        GEMS=2.7.0
fi

if [ $SHLL = fish ]; then
        INITFILE="$PREFIX/etc/fish/config.fish"
else
        INITFILE="$PREFIX/etc/bash.bashrc"
fi

if [ $UNAME = "aarch64" ]
then
        ARCH="aarch64-linux-android"
elif [ $UNAME = "arm" ]
then
        ARCH="arm-linux-androideabi"
elif [ $UNAME = "i686" ]
then
        ARCH="i686-linux-android"
elif [ $UNAME = "x86_64" ]
then
        ARCH="x86_64-linux-android"
else
        printf "$R[ERR]─➤ Your architecture is uncompatible\n$W"
        exit
fi

Garbage() {
for i in $TOOL unstable-repo postgresql $MSFDIR $HOME/$TOOL-framework ; do
        if [ -d $i ]; then
                rm -rf $i >/dev/null 2>&1
        fi
        REPO=$(pkg list-all | grep -oE "$i")
        if [ ! -z $REPO ]; then
                yes | pkg uninstall $i && apt autoremove
        fi
done
}
msfdb(){
        if [ ! -d $PREFIX/var/lib/postgresql ]; then
                mkdir -p $PREFIX/var/lib/postgresql
        fi
        wget $iHDB/fix-tools//msfupdate $MSFDIR/msfupdate -q
        chmod +x $MSFDIR/msfupdate
        wget https://raw.githubusercontent.com/ivam3/java/master/.embed/apk.rb -O $MSFDIR/lib/msf/core/payload/apk.rb -q
        initdb $PREFIX/var/lib/postgresql
        pg_ctl -D $PREFIX/var/lib/postgresql start
        createuser msf
        createdb msf_database
	echo "production:" > $MSFDIR/config/database.yml
	echo "  adapter: postgresql" >> $MSFDIR/config/database.yml
	echo "  database: msf_database" >> $MSFDIR/config/database.yml
	echo "  username: msf" >> $MSFDIR/config/database.yml
	echo "  password:" >> $MSFDIR/config/database.yml
	echo "  host: 127.0.0.1" >> $MSFDIR/config/database.yml
	echo "  port: 5432" >> $MSFDIR/config/database.yml
	echo "  pool: 75"
	echo "  timeout: 5"
        if ! cat $INITFILE | grep -oE "postgresql" --silent; then
                sed -i "4a alias postgresql=\"pg_ctl -D $PREFIX/var/lib/postgresql\"" $INITFILE
        fi
        ! command -v i-Haklab > /dev/null || gem install lolcat
}

Ivam3() {
	wget $JAVADB/.embed/apk.rb -O $MSFDIR/lib/msf/core/payload/apk.rb -q
	wget $iHDB/.set/bin/RuGiR -O $PREFIX/bin/RuGiR -q
	chmod +x $PREFIX/bin/RuGiR
}

Ending() {
	printf "\n\n$C ::::::::: METASPLOIT INSTALLED :::::::::$W\n"
	printf " The data base can be active with command\n\t$G   > postgresql start <$W\n"
	printf "      Now you can run it with command$G\n\t$G   >    msfconsole    <\n"
	printf "\n$R :::::::::::::: ADVERSMENT ::::::::::::::$W\n"
	printf "        If msfconsole didn't run\n         execute the file RuGiR\n       (Ruby Gem issues Resolved)\n    to try to fix it with another steps\n\t$G   >       RuGiR      <$W\n\n"
}

Termux() {
	Garbage
	yes | pkg update && pkg upgrade && pkg install util-linux autoconf util-linux bison clang coreutils axel curl findutils git apr apr-util libtool pkg-config wget make ruby termux-tools ncurses-utils ncurses unzip postgresql termux-elf-cleaner && pkg install unstable-repo && pkg install metasploit
	Ivam3
	Ending
}

Rapid7() {
	Garbage #:::FUNCTION::#
	yes |pkg update && pkg upgrade && pkg install ruby libpcap autoconf
	gem install bundler:2.1.4
	pushd $PREFIX/opt
        curl -LO $R7DB/$MSFv.tar.gz
        tar -xf $PREFIX/opt/$MSFv.tar.gz
        mv $MSFDIR-$MSFv $MSFDIR
        rm $PREFIX/opt/$MSFv.tar.gz
        cd $MSFDIR
        sed '/rbnacl/d' -i Gemfile.lock
        sed '/rbnacl/d' -i metasploit-framework.gemspec
        gem install bundler
        sed 's|nokogiri (1.*)|nokogiri (1.10.4)|g' -i Gemfile.lock
        gem install nokogiri -v '1.10.4' -- --use-system-libraries
        gem update --system
        bundle install -j5
        $PREFIX/bin/find -type f -executable -exec termux-fix-shebang \{\} \;
        rm $MSFDIR/modules/auxiliary/gather/http_pdf_authors.rb
        termux-elf-cleaner $PREFIX/lib/ruby/gems/$GEMS/gems/$PGv/lib/pg_ext.so
	msfdb #:::FUNCTION::#
#:::::::MSFCONSOLE MSFVENOM FILES:::::::#
	echo "#!/data/data/com.termux/files/usr/bin/sh" > $PREFIX/bin/msfconsole
	echo "SCRIPT_NAME=\$(basename \"\$0\")" >> $PREFIX/bin/msfconsole
	echo "METASPLOIT_PATH=\"\${PREFIX}/opt/metasploit-framework\"" >> $PREFIX/bin/msfconsole
	echo "# Fix ruby bigdecimal extensions linking error." >> $PREFIX/bin/msfconsole
	echo "case \"\$(uname -m)\" in" >> $PREFIX/bin/msfconsole
	echo "        aarch64)" >> $PREFIX/bin/msfconsole
	echo "                export LD_PRELOAD=\"\${PREFIX}/lib/ruby/$GEMS/aarch64-linux-android/bigdecimal.so:\$LD_PRELOAD\"" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "        arm*)" >> $PREFIX/bin/msfconsole
	echo "                export LD_PRELOAD=\"\${PREFIX}/lib/ruby/$GEMS/arm-linux-androideabi/bigdecimal.so:\$LD_PRELOAD\"" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "        i686)" >> $PREFIX/bin/msfconsole
	echo "                export LD_PRELOAD=\"\${PREFIX}/lib/ruby/$GEMS/i686-linux-android/bigdecimal.so:\$LD_PRELOAD\"" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "        x86_64)" >> $PREFIX/bin/msfconsole
	echo "                export LD_PRELOAD=\"\${PREFIX}/lib/ruby/$GEMS/x86_64-linux-android/bigdecimal.so:\$LD_PRELOAD\""
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "        *)" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "esac" >> $PREFIX/bin/msfconsole
	echo "case \"\$SCRIPT_NAME\" in" >> $PREFIX/bin/msfconsole
	echo "        msfconsole|msfvenom)" >> $PREFIX/bin/msfconsole
	echo "                exec ruby \"\$METASPLOIT_PATH/\$SCRIPT_NAME\" \"\$@\"" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "        *)" >> $PREFIX/bin/msfconsole
	echo "                echo \"[!] Unknown Metasploit command '\$SCRIPT_NAME'.\"" >> $PREFIX/bin/msfconsole
	echo "                exit 1" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "esac" >> $PREFIX/bin/msfconsole
	chmod +x $PREFIX/bin/msfconsole
        ln -sf $(which msfconsole) $PREFIX/bin/msfvenom
        echo "#!/data/data/com.termux/files/usr/bin/bash" > $PREFIX/opt/metasploit-framework/installer.sh
        echo "echo \"[*]─➤ Metasploit Framework installation finished.\"" >> $PREFIX/opt/metasploit-framework/installer.sh
        echo "#                 @Ivam3" >> $PREFIX/opt/metasploit-framework/installer.sh
	Ivam3
	Ending
}

MAIN() {
	printf "$G[+]─➤ Reading environment ...\n"
	sleep 2
	printf "[+]─➤ Platform$Y =$W\tTermux$G\n[+]─➤ Android version$Y =$W\t$SOv$G\n[+]─➤ Architecture$Y =$W\t$ARCH$G\n[+]─➤ Ruby Gems version$Y =$W\t$GEMS$G\n[+]─➤ Ruby PG version$Y =$W\t$PGv$G\n[+]─➤ Configuration file$Y =$W\t$INITFILE$G\n[+]─➤ Termux $TOOL$Y =$W\t$ToR7$G\n[+]─➤ Rapid7 $TOOL$Y =$W\t$ToR7$G\n[+]─➤ $TOOL version$Y =$W\t$MSFv$G\n\n$C         Press$G ENTER$C to continue"
        read enter
	if [ $SOv -lt "7" ]
	then
		Termux
	else
		Rapid7
	fi
}

command -v termux-info > /dev/null 2>&1 || pkg install termux-api termux-tools -y > /dev/null 2>&1
echo $(clear)
        printf "$C"
        echo "                -{ IbyC } "
        echo "   -{ SO > Android - Only for Termux } "
        echo "              -{ Coded by } "
        printf "$G"
        echo "      =============================="
        echo "      .___.                 ______,"
        echo "      |   |__ ______   ___  \_____ \ "
        echo "      |   \ \/ /\__ \ /   \   _(__ <,"
        echo "      |   |\   / __ \| Y Y \ /      \ "
        echo "      |___| \_/ (____|__|_| /______ /"
        echo "                     \/    \/      \/ "
        echo "      ====== By ___ Cinderella ======"
        echo
printf "$C"
        echo "          [---] Join me on [---]"
        printf "$C[-]$W www.youtube.com/c/Ivam3byCinderella$C [-]\n"
        printf "      [-]$W t.me/Ivam3byCinderella$C [-]\n"
        printf "          [-]$W t.me/Ivam3_Bot$C [-]\n"
        sleep 1
printf "$C\n"
        echo "        [---] SPECIAL THANKS [---]"
        echo "                    TO "
        echo "       [-] MY MASTER CINDERELLA [-]"
printf "$W"
        echo "             People don't die"
        echo "    If they still live in the hearts"
        echo "           of their loved ones"
        echo "       We love her ... We miss her"
        echo "                  *RIP*"
printf "$R\n"
        echo "          [---] DISCLAIMER [---]"
printf "$W"
        echo "   If the law is violated with it's use"
        echo "     This would be the responsibility"
        echo "        of the user who handled it"
printf "$R"
        echo "       [-] Use At Your Own Risk [-]"
printf "$W\n"

if [ -d ~/metasploit-framework ] || [ -d $MSFDIR ]; then
	printf "$Y[?]->$W Metasploit already exist$Y |$W Do you want re-install it?\n"
	while read -p "[yes/no]─➤ " yesorno && [ -z $yesorno ]; do
		continue
	done
	if [ $yesorno = "yes" ] || [ $yesorno = "Yes" ] || [ $yesorno = "YES" ]; then
		MAIN
	else
		printf "$G\n[!]─➤ Keeping Metasploit...\n\n"
		sleep 1
	fi
else
	MAIN
fi

#                                               @Ivam3
