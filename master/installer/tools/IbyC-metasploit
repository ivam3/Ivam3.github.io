#!/data/data/com.termux/files/usr/bin/bash
#Created on Feb/2020
IFS=$'\n\t'
trap ctrl_c 2

TOOL="metasploit"
SCRIPT_NAME="IbyC-$TOOL"
UNAME=$(uname -m)
SOv=$(termux-info |awk '$1 < 11 {print $1}' |tail -n 1 |awk -F "." '{print $1}')
JAVADB="https://raw.githubusercontent.com/ivam3/java/master"
R7DB="https://github.com/rapid7/metasploit-framework/archive"
iHDB="https://github.com/ivam3/i-Haklab/raw/master/.set"
Tmux=$(pkg list-all|grep -o "metasploit")
SHLL=$(echo $SHELL |awk -F "/" '{print $8}')
MSFDIR=$PREFIX/opt/metasploit-framework
APK=$MSFDIR/lib/msf/core/payload/apk.rb
MSFv="6.0.27"
R='\033[1;31m'
G='\033[1;32m'
Goke='\033[92m'
Glig=='\e[1;32m'
Y='\033[1;33m'
B='\033[1;34m'
M='\033[1;35m'
C='\033[1;36m'
W='\033[0m'

ctrl_c() {
	printf "$R\n\n\t[w] Need a help? [w]$B\n      Telegram : t.me/Ivam3_Bot$W\n"
	exit
}

#::::::::BLOCKING:::::::#
while [ ! $(id -u) -ne 0 ]; do
	printf "$R\n[W]─➤ You need to be a common user$W\n"
	exit
done
until [ -e $HOME/$SCRIPT_NAME ]; do
	printf "$R\n[W]─➤ $SCRIPT_NAME file have to be in Home directory$W\n"
	exit
done

#:::::::::DEFINITIONS:::::::#
if [ $SHLL = fish ]; then
        INITFILE="$PREFIX/etc/fish/config.fish"
else
        INITFILE="$PREFIX/etc/bash.bashrc"
fi

if [ $UNAME = "aarch64" ]
then
        ARCH="aarch64-linux-android"
elif [ $UNAME = "arm" ] || [ $UNAME = "armv7l" ]
then
        ARCH="arm-linux-androideabi"
elif [ $UNAME = "i686" ]
then
        ARCH="i686-linux-android"
elif [ $UNAME = "x86_64" ]
then
        ARCH="x86_64-linux-android"
else
        printf "$R[ERR]─➤ Your architecture is uncompatible\n$W"
        exit
fi

Garbage() {
	yes|dpkg -l | grep '^rc' | awk '{print $2}' | xargs apt purge
for i in $TOOL unstable-repo $MSFDIR $HOME/$TOOL-framework ; do
        if [ -d $i ]; then
                rm -rf $i >/dev/null 2>&1
        fi
        REPO=$(pkg list-all | grep -oE "$i" | head -n 1)
        if [ ! -z $REPO ]; then
                yes | pkg uninstall $i && apt autoremove
        fi
done
}
UPandINSTALL() {
	#::Upgrade and install available repositories::#
        yes|pkg update && pkg upgrade
        for i in libiconv zlib autoconf bison clang coreutils curl findutils apr apr-util libffi libgmp libpcap postgresql readline libsqlite openssl libtool libxml2 libxslt ncurses pkg-config wget make ruby libgrpc ncurses-utils ncurses unzip zip tar termux-elf-cleaner util-linux axel unstable-repo; do
                GOTIT=$(pkg list-installed | grep -oE $i)
                PKG=$(pkg list-all|grep -o $i)
                if [ ! -z "$PKG" ] && [ -z "$GOTIT" ]; then
                        printf "$G\n[+]─➤$W Installing the repository $i $W\n"
                        yes|pkg install $i >/dev/null 2>&1
                elif [ ! -z "$PKG" ] && [ ! -z "$GOTIT" ]; then
                        continue
                else
                        printf "$R\n[w]─➤$W The repository $i is not candidate$W\n"
                        sleep 1
                fi
        done
}
msfdb(){
        if [ ! -d $PREFIX/var/lib/postgresql ]; then
                mkdir -p $PREFIX/var/lib/postgresql
        fi
        wget $iHDB/fix-tools//msfupdate $MSFDIR/msfupdate -q
        chmod +x $MSFDIR/msfupdate
        wget https://raw.githubusercontent.com/ivam3/java/master/.embed/apk.rb -O $MSFDIR/lib/msf/core/payload/apk.rb -q
        initdb $PREFIX/var/lib/postgresql
        pg_ctl -D $PREFIX/var/lib/postgresql start
        createuser msf
        createdb msf_database
	echo "production:" > $MSFDIR/config/database.yml
	echo "  adapter: postgresql" >> $MSFDIR/config/database.yml
	echo "  database: msf_database" >> $MSFDIR/config/database.yml
	echo "  username: msf" >> $MSFDIR/config/database.yml
	echo "  password:" >> $MSFDIR/config/database.yml
	echo "  host: 127.0.0.1" >> $MSFDIR/config/database.yml
	echo "  port: 5432" >> $MSFDIR/config/database.yml
	echo "  pool: 75"
	echo "  timeout: 5"
        if ! cat $INITFILE | grep -oE "postgresql" --silent; then
                sed -i "4a alias postgresql=\"pg_ctl -D $PREFIX/var/lib/postgresql\"" $INITFILE
        fi
        ! command -v i-Haklab > /dev/null || gem install lolcat
}

Ivam3() {
	wget $JAVADB/.embed/apk.rb -O $MSFDIR/lib/msf/core/payload/apk.rb -q
	wget $iHDB/.set/bin/RuGiR -O $PREFIX/bin/RuGiR -q
	chmod +x $PREFIX/bin/RuGiR

#:::: FIXING BIG DECIMAL ISSUES ::::#
LINUXANDROID=$(find $PREFIX/lib/ruby/$GEMS -iname "bigdecimal.so" |awk -F "/" '{print $10}')
	yes|apt install -yq patchelf >/dev/null 2>&1
	if [ -e "$PREFIX/lib/ruby/$GEMS/$LINUXANDROID/bigdecimal.so" ]; then
		if [ -n "$(patchelf --print-needed "$PREFIX/lib/ruby/$GEMS/$LINUXANDROID/bigdecimal/util.so" | grep bigdecimal.so)" ]; then
			exit 0
		fi
		patchelf --add-needed \
			"$PREFIX/lib/ruby/$GEMS/$LINUXANDROID/bigdecimal.so" \
			"$PREFIX/lib/ruby/$GEMS/$LINUXANDROID/bigdecimal/util.so"
	fi
}

Ending() {
	if [ -d $MSFDIR ]
	then
		printf "\n\n$C ::::::::: METASPLOIT INSTALLED :::::::::$W\n"
		printf " The data base can be active with command\n\t$G   > postgresql start <$W\n"
		printf "      Now you can run it with command$G\n\t$G   >    msfconsole    <\n"
		printf "\n$R :::::::::::::: ADVERSMENT ::::::::::::::$W\n"
		printf "        If msfconsole didn't run\n         execute the file RuGiR\n       (Ruby Gem issues Resolved)\n    to try to fix it with another steps\n\t$G   >       RuGiR      <$W\n\n"
	else
		printf "$R\n[ERROR-PATH]─➤ Going to https://t.me/Ivam3_Bot$W\n"
	fi
}

Rapid7() {
	Garbage
        UPandINSTALL
        if [ ! -d $PREFIX/opt ]; then
                mkdir -p $PREFIX/opt
        fi
        cd $PREFIX/opt
        curl -LO $R7DB/$MSFv.tar.gz
        tar -xf $PREFIX/opt/$MSFv.tar.gz
        mv $MSFDIR-$MSFv $MSFDIR
        rm $PREFIX/opt/$MSFv.tar.gz
        cd $MSFDIR
        gem install bundler:2.2.9 -- --use-system-libraries
        if [ "$(gem list -i rubygems-update 2>/dev/null)" = "false" ]
        then
                gem install --no-document --verbose rubygems-update
        fi

#::::CONFIG VERSION OF GEMS IN GEMFILE.LOCK::::#
        sed '/rbnacl/d' -i Gemfile.lock
        sed 's|nokogiri (1.*)|nokogiri (1.11.1)|g' -i Gemfile.lock
        sed 's|sqlite3 (1.*)|sqlite3 (1.4.2)|g' -i Gemfile.lock
	sed 's|pcaprub (0.*)|pcaprub (0.12.4)|g' -i Gemfile.lock
        sed 's|ttfunk (1.*)|ttfunk (1.7.0)|g' -i Gemfile.lock
	sed 's|actionpack (5.*)|actionpack (6.1.2.1)|g' -i Gemfile.lock
	sed 's|actionview (= 5.*)|actionview (= 6.1.2.1)|g' -i Gemfile.lock
	sed 's|activesupport (= 5.*|activesupport (= 6.1.2.1)|g' -i Gemfile.lock
        sed '/rbnacl/d' -i metasploit-framework.gemspec

#::::CONFIG VERSION OF GEMS IN GEMFILE::::#
        sed "s|gem 'sqlite3', '~>1.*.*'|gem 'sqlite3', '~>1.4.2'|g" -i Gemfile
        sed -i "7a gem 'webrick', '~> 1.7'" Gemfile

#::::INSTALL ADAPTED GEMS::::#
        gem install --no-document --verbose bundler:2.2.9 #2.2.7
        gem install nokogiri -v '1.11.1' -- --use-system-libraries
        gem install webrick -v '1.7' -- --use-system-libraries
	gem install actionpack -v '6.1.2.1' -- --use-system-libraries

#::::UPDATING AND INSTALLING GEMS::::#
	gem update --system
        bundle install -j3
	$PREFIX/bin/find $MSFDIR -type f -executable -print0 | xargs -0 -r termux-fix-shebang
        rm $MSFDIR/modules/auxiliary/gather/http_pdf_authors.rb
	$PREFIX/bin/find $PREFIX/lib/ruby/gems -type f -iname \*.so -print0 | xargs -0 -r termux-elf-cleaner

#:::TO CREATING MSF DATABASE::#
	msfdb

#:::::::MSFCONSOLE MSFVENOM FILES:::::::#
	BIGDECIMAL=$(find $PREFIX/lib/ruby/$GEMS -iname "bigdecimal.so")
	echo "#!/data/data/com.termux/files/usr/bin/sh" > $PREFIX/bin/msfconsole
	echo "SCRIPT_NAME=\$(basename \"\$0\")" >> $PREFIX/bin/msfconsole
	echo "METASPLOIT_PATH=\"\${PREFIX}/opt/metasploit-framework\"" >> $PREFIX/bin/msfconsole
	echo "# Fix ruby bigdecimal extensions linking error." >> $PREFIX/bin/msfconsole
	echo "export LD_PRELOAD=\"$BIGDECIMAL:\$LD_PRELOAD\"" >> $PREFIX/bin/msfconsole
	echo "case \"\$SCRIPT_NAME\" in" >> $PREFIX/bin/msfconsole
	echo "        msfconsole|msfvenom)" >> $PREFIX/bin/msfconsole
	echo "                exec ruby \"\$METASPLOIT_PATH/\$SCRIPT_NAME\" \"\$@\"" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "        *)" >> $PREFIX/bin/msfconsole
	echo "                echo \"[!] Unknown Metasploit command '\$SCRIPT_NAME'.\"" >> $PREFIX/bin/msfconsole
	echo "                exit 1" >> $PREFIX/bin/msfconsole
	echo "                ;;" >> $PREFIX/bin/msfconsole
	echo "esac" >> $PREFIX/bin/msfconsole
	chmod +x $PREFIX/bin/msfconsole
        ln -sf $(which msfconsole) $PREFIX/bin/msfvenom
	Ivam3
	Ending
}

Termux() {
	Garbage
	UPandINSTALL
	yes|pkg install $MSF
	Ivam3
	Ending
}

MAIN() {
	printf "$G[+]─➤ Reading environment ...\n"
        GEMS=$(ls $PREFIX/lib/ruby |grep '[0-9].[0-9].[0-9]')
        PGv=$(find $PREFIX/lib/ruby/gems/$GEMS/gems -iname pg_ext.so | awk -F "/" '{print $12}' | head -n 1)
	sleep 2
	printf "[+]─➤ Platform$Y            =$W Termux$G\n[+]─➤ Android version$Y     =$W $SOv$G\n[+]─➤ Architecture$Y        =$W $ARCH$G\n[+]─➤ Ruby Gems version$Y   =$W $GEMS$G\n[+]─➤ Ruby PG version$Y     =$W $PGv$G\n[+]─➤ Configuration file$Y  =$W $INITFILE$G\n[+]─➤ Termux $TOOL$Y   =$W $Tmux$G\n[+]─➤ Rapid7 $TOOL$Y   =$W True$G\n[+]─➤ $TOOL version$Y  =$W $MSFv$G\n"
	if [ -z $Tmux ];then
		printf "$R\n[w]─➤$W No such$R metasploit$W in Termux repositories"
		printf "$G\n[+]─➤$W Metasploit will be installed from the$B Rapid7$W repositories\n"
		printf "\n$C         Press$G ENTER$C to continue"
		read enter
		Rapid7
	else
		printf "$Y\n[!]─➤$W Metasploit found in Termux repositories"
		printf "$G\n[+]─➤$W Metasploit will be installed from the$B Termux$W repositories\n"
		Termux
		printf "\n$C         Press$G ENTER$C to continue"
		read enter
	fi
}

command -v termux-info > /dev/null 2>&1 || pkg install termux-api termux-tools -y > /dev/null 2>&1
echo $(clear)
        printf "$C"
        echo "                -{ IbyC } "
        echo "   -{ SO > Android - Only for Termux } "
        echo "              -{ Coded by } "
        printf "$G"
        echo "      =============================="
        echo "      .___.                 ______,"
        echo "      |   |__ ______   ___  \_____ \ "
        echo "      |   \ \/ /\__ \ /   \   _(__ <,"
        echo "      |   |\   / __ \| Y Y \ /      \ "
        echo "      |___| \_/ (____|__|_| /______ /"
        echo "                     \/    \/      \/ "
        echo "      ====== By ___ Cinderella ======"
        echo
printf "$C"
        echo "          [---] Join me on [---]"
        printf "$C[-]$W www.youtube.com/c/Ivam3byCinderella$C [-]\n"
        printf "      [-]$W t.me/Ivam3byCinderella$C [-]\n"
        printf "          [-]$W t.me/Ivam3_Bot$C [-]\n"
        sleep 1
printf "$C\n"
        echo "        [---] SPECIAL THANKS [---]"
        echo "                    TO "
        echo "       [-] MY MASTER CINDERELLA [-]"
printf "$W"
        echo "             People don't die"
        echo "    If they still live in the hearts"
        echo "           of their loved ones"
        echo "       We love her ... We miss her"
        echo "                  *RIP*"
printf "$R\n"
        echo "          [---] DISCLAIMER [---]"
printf "$W"
        echo "   If the law is violated with it's use"
        echo "     This would be the responsibility"
        echo "        of the user who handled it"
printf "$R"
        echo "       [-] Use At Your Own Risk [-]"
printf "$W\n"

if [ -d ~/metasploit-framework ] || [ -d $MSFDIR ]; then
	printf "$Y[?]->$W Metasploit already exist$Y |$W Do you want re-install it?\n"
	while read -p "[yes/no]─➤ " yesorno && [ -z $yesorno ]; do
		continue
	done
	if [ $yesorno = "yes" ] || [ $yesorno = "Yes" ] || [ $yesorno = "YES" ]; then
		MAIN
	else
		printf "$G\n[!]─➤ Metasploit Keeped!!\n\n"
		sleep 0.5
	fi
else

	MAIN
fi

#                                               @Ivam3
